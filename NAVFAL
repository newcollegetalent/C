// CODE BY NAVFAL

#include<stdio.h>
#include<string.h>
#include<stdio.h>


/* After the execution of the for loop, the content of array: First time: 5 3 4 6 2 1 Second time: 6 5 4 3 2 1 Third time: 6 5 4 3 2 1 Now, when while loop execute again, done = 1 and first and second for loop if condition will not be satisfied . Therefore, At the end, value of arr[3] = 3, Option C is correct. See this to understand more: [sourcecode language="CPP"] #include void swap(int *t, int *x) { int m; m = *t; *t = *x; *x = m; } int main() { int array[] = {3, 5, 1, 4, 6, 2}; int done = 0; int i; while (done == 0) { done = 1; for( i = 0; i <= 4; i++) { if(array[i] < array[i+1]) { swap(&array[i], &array[i+1]); done = 0; } } for (i = 5; i >= 1; i--) { if( array[i] > array[i-1]) { swap(&array[i], &array[i-1]); done = 0; } } } printf("%d", array[3]); } [/sourcecode] */

// Swapping and arranging using POINTERS 
// DOUBTFUL ANSWER - Dont know why
int swap(int *p1, int *p2){
    int *temp;
    temp = *p1;
    *p1 = *p2;
    *p2 = temp;
}



int main()
{
    int array[] = {3, 5, 1, 4, 6, 2};
    int done = 0;
    int i;

    printf("\n");
    for(i=0; i<=5; i++) printf(" %d ", array[i]);
    
    
    
    
    
    while (done == 0)
    {
        done  = 1;
        for (i = 0; i <= 4; i++)
        {
            if (array[i] < array[i+1])
            {
                swap(&array[i], &array[i+1]);
                done = 0;
            }
        }
    }
    
    printf("\nAfter First Swap : ");
    for(i=0; i<=5; i++) printf(" %d ", array[i]);
    
    
    
    
    
    while(done == 0){
        done = 1;
        for (i = 5; i >= 1; i--)
        {
            if (array[i] > array[i-1])
            {
                swap(&array[i], &array[i-1]);
                done = 0;
            }
            
        }
    }
    printf("\nAfter Second Swap : ");
    for(i=0; i<=5; i++) printf(" %d ", array[i]);

}






void main(){
    int num;
    char word[30];
    printf("Enter word : ");
    gets(word);
//
//    printf("Enter rotations : ");
//    scanf("%d", &num);
//
//    for(int i=0; i<num; ++i){
//        strrev(word);
//    }

    char temp[30];
    strcpy(word, temp);

    strrev(word);

    int result = stricmp(word, temp);
    printf("%d", result);

//    if(temp == word){
//        printf("Palindrome");
//    }else{
//    printf("Not palindrome");
//    }
}





// Clear Palindrome 

#include<stdio.h>
#include<string.h>
void main(){
    char word[10];

    printf("Enter the word : ");
    gets(word);

    int len = strlen(word);

    int start = 0;
    int end = len - 1;

    int result = 0;
    while(start<=end){
        if(word[start]!=word[end]){
            result = 1;
            break;
        }
        start++;
        end--;
    }

    (result==0)?printf("Palindrome"):printf("Not Palindrome");
}


// Infinite Loop

main(){
printf("Hello");
main();
}



// C program for writing
// struct to file
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// a struct to read and write
struct person
{
	int id;
	char fname[20];
	char lname[20];
};

int main ()
{
	FILE *outfile;

	// open file for writing
	outfile = fopen ("person.txt", "a");
	if (outfile == NULL)
	{
		fprintf(stderr, "\nError opend file\n");
		exit (1);
	}

	struct person input1 = {1, "rohan", "sharma"};
	struct person input2 = {2, "mahendra", "dhoni"};

	// write struct to file
	fwrite (&input1, sizeof(struct person), 1, outfile);
	fwrite (&input2, sizeof(struct person), 1, outfile);

	if(fwrite != 0)
		printf("contents to file written successfully !\n");
	else
		printf("error writing file !\n");

	// close file
	fclose (outfile);

	return 0;
}




#include<stdio.h>
#include<string.h>

union student{
char name[10];
int marks;
};

main()
{
    union student first, second, third;

    strcpy(first.name, "Navfal");

    strcpy(second.name, "Faiz");

    strcpy(third.name, "Fazil");
    third.marks = 98;
    printf("name of first : %s", first.name);

}






#include<stdio.h>
#include<string.h>
#include<ctype.h>

main(){
char first[20], second[20];

printf("Enter first word : ");
scanf("%s", first);
printf("Enter second word : ");
scanf("%s", second);


for(int i = 0; first[i]; i++){
  first[i] = tolower(first[i]);
}

for(int i = 0; second[i]; i++){
  second[i] = tolower(second[i]);
}

printf("\n%d", strcmp(first, second));

int count, j=0;
for(int i=0; first[i]; i++){
    if(first[i] != second[j]){
            if(first[i]>second[j]){
                count = 1;
                break;
            }else{
            count = -1;
            break;
            }
        }
        else{
            count = 0;
        }
        j++;
    }

    printf("\n\n%d", count);
}





#include<stdio.h>
#include<string.h>

int main(){

char word[20];
printf("Enter word to arrange in order : ");
scanf("%s", word);

for(int i=0; i<strlen(word); i++){
    for(int j=0; j<strlen(word); j++){
        if (word[j]>word[i]){
            char temp = word[i];
            word[i] = word[j];
            word[j] = temp;
        }
    }
}



printf("%s", word);
return 0;
}





#include<stdio.h>
#include<string.h> // used for string copy

struct employee{

int id;
char name[20];
char work[20];
int salary;

struct employee *idptr;
struct employee *nameptr;
struct employee *workptr;
struct employee *salaryptr;
};


int main(){

struct employee first, second, third;

first.id = 35;
strcpy(first.name, "Navfal");
strcpy(first.work, "CTO");
first.salary = 100000;
first.salaryptr = &third;


second.id = 20;
strcpy(second.name, "Abdullah");
strcpy(second.work, "CEO");
second.salary = 150000;
second.salaryptr = &third;


third.id = 10;
strcpy(third.name, "Abdur Rahman");
strcpy(third.work, "HR Manager");
third.salary = 80000;
third.salaryptr = &second;

int x;

// x starts traveling from one structure to another
x = first.salaryptr ->  salary;
x = second.salaryptr ->  salary;
x = third.salaryptr ->  salary;


printf("CEO is %s", second.name);
printf(" and his salary is %d", second.salary);
printf("\nCTO is %s ", first.name);
printf(" and his salary is %d ", first.salary);

return 0;
}







#include<stdio.h>

struct student{
int reg;
char name[10];
char grade;
};

void listStructures(struct student stud1);

int main(){
struct student stud1;
strcpy(stud1.name, "Navfal");
stud1.reg = 35;
stud1.grade = 'A';
listStructures(stud1);
return 0;
}

void listStructures(struct student stud1){
printf("Student number : %d\n", stud1.reg);
printf("Name : %s\n", stud1.name);
printf("Student's grade : %c\n", stud1.grade);
}






#include<stdio.h>

void main(){
   int time, minutes;

   printf("Enter time (24 Hours) : ");
   scanf("%d %d", &time, &minutes);

   if(time>=13)
    {
        printf("Current time : %d : %d PM", (time%12), minutes);
    }
   else
    {
        printf("Current time : %d : %d AM", time, minutes);
    }
}






// PALINDROME STRING


#include<stdio.h>
#include<string.h>

void main(){
    char word[10];

    printf("Enter the word : ");
    gets(word);

    int len = strlen(word);

    int start = 0;
    int end = len - 1;

    int result = 0;
    while(start<=end){
        if(word[start]!=word[end]){
            result = 1;
            break;
        }
        start++;
        end--;
    }

    (result==0)?printf("Palindrome"):printf("Not Palindrome");
}








// ARMSTRONG NUMBER

#include<stdio.h>
#include<stdlib.h>
#include<math.h>

void main(){
    
    int num;
    
    // User input of num
    printf("Enter num : ");
    scanf("%d", &num);
    int tempNum = num;
    
    
    
    // Finding the count of the number
    int sum=0;
    while(tempNum!=0){
        
        tempNum /= 10;
        sum++;
    }
    int count = sum;
    
    
    int add = 0;
    while(num != 0){
        
        int temp, rem;
        
        // Remainder is split
        rem = num % 10;
        
        // Power of the remainder
        temp = pow(rem, count);
        
        
        // Adding the powers of digits to 'a'
        add = add + temp;
        
        
        // Removing the final digit 
        num /= 10;
        
    }
    
    printf("\n\n%d", add);
}









// A Beautiful Linked List Basic Code



// A complete working C program to demonstrate all insertion methods 
// on Linked List 
#include <stdio.h> 
#include <stdlib.h> 

// A linked list node 
struct Node 
{ 
int data; 
struct Node *next; 
}; 

/* Given a reference (pointer to pointer) to the head of a list and 
an int, inserts a new node on the front of the list. */
void push(struct Node** head_ref, int new_data) 
{ 
	/* 1. allocate node */
	struct Node* new_node = (struct Node*) malloc(sizeof(struct Node)); 

	/* 2. put in the data */
	new_node->data = new_data; 

	/* 3. Make next of new node as head */
	new_node->next = (*head_ref); 

	/* 4. move the head to point to the new node */
	(*head_ref) = new_node; 
} 

/* Given a node prev_node, insert a new node after the given 
prev_node */
void insertAfter(struct Node* prev_node, int new_data) 
{ 
	/*1. check if the given prev_node is NULL */
	if (prev_node == NULL) 
	{ 
	printf("the given previous node cannot be NULL"); 
	return; 
	} 

	/* 2. allocate new node */
	struct Node* new_node =(struct Node*) malloc(sizeof(struct Node)); 

	/* 3. put in the data */
	new_node->data = new_data; 

	/* 4. Make next of new node as next of prev_node */
	new_node->next = prev_node->next; 

	/* 5. move the next of prev_node as new_node */
	prev_node->next = new_node; 
} 

/* Given a reference (pointer to pointer) to the head 
of a list and an int, appends a new node at the end */
void append(struct Node** head_ref, int new_data) 
{ 
	/* 1. allocate node */
	struct Node* new_node = (struct Node*) malloc(sizeof(struct Node)); 

	struct Node *last = *head_ref; /* used in step 5*/

	/* 2. put in the data */
	new_node->data = new_data; 

	/* 3. This new node is going to be the last node, so make next of 
		it as NULL*/
	new_node->next = NULL; 

	/* 4. If the Linked List is empty, then make the new node as head */
	if (*head_ref == NULL) 
	{ 
	*head_ref = new_node; 
	return; 
	} 

	/* 5. Else traverse till the last node */
	while (last->next != NULL) 
		last = last->next; 

	/* 6. Change the next of last node */
	last->next = new_node; 
	return; 
} 

// This function prints contents of linked list starting from head 
void printList(struct Node *node) 
{ 
while (node != NULL) { 
	printf(" %d -->", node->data); 
	node = node->next; 
    } 
} 

/* Driver program to test above functions*/
int main() 
{ 
/* Start with the empty list */
struct Node* head = NULL; 

// Insert 6. So linked list becomes 6->NULL 
append(&head, 6); 

// Insert 7 at the beginning. So linked list becomes 7->6->NULL 
push(&head, 7); 

// Insert 1 at the beginning. So linked list becomes 1->7->6->NULL 
push(&head, 1); 

// Insert 4 at the end. So linked list becomes 1->7->6->4->NULL 
append(&head, 4); 

// Insert 8, after 7. So linked list becomes 1->7->8->6->4->NULL 
insertAfter(head->next, 8); 

printf("\n Created Linked list is: "); 
printList(head); 

return 0; 
} 
